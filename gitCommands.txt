Your Git Learning Journey: Q&A Recap
1. What is Git and why should I use it?

Q: What is Git and why is it important?
A: Git is a version control system that tracks changes in your files/projects. It helps you collaborate, experiment, and recover old versions easily.

2. What tools did you install?
Q: What Git-related tools are on my system?
A: You have Git Bash (command line), Git GUI, and GitHub Desktop (visual interface for Git/GitHub).

3. How do I check and set up my Git identity?
Q: How do I check my Git username and email?
A: git config --global user.name
   git config --global user.email
   If they’re blank, set them with:

git config --global user.name "Your Name"
git config --global user.email "your@email.com"

4. How do I create and initialize a project with Git?
Q: How do I start a Git project?
A:  mkdir my-git-practice
    cd my-git-practice
    git init
This creates a new project and initializes it as a Git repo.

5. How do I create and add files?
Q: How do I create and add a file to Git?
A:   echo "Hello Git!" > hello.txt
     git add hello.txt
     git commit -m "Initial commit: Add hello.txt"

6. What is the difference between git add hello.txt and git add .?
Q: What’s the difference?
A:      git add hello.txt adds only that file to staging.
        git add . adds all changes (in current directory & subfolders) to staging.

7. What is the difference between main and master?
Q: What is main vs master branch?
A:      main is the default branch for new GitHub repos (since 2020).
        master was the older default.
They work the same; only the name differs.

8. How do I link and push my project to GitHub?
Q: How do I connect my local repo to GitHub?
A:
git remote add origin https://github.com/<your-username>/<repo>.git
git branch -M main    # rename branch to 'main' if needed
git push -u origin main

9. How do I move around drives in Git Bash?
Q: How do I change to the E or G drive in Git Bash?
A:    cd /e/
      cd /g/
      Unlike Windows CMD, you can’t use e: or g:.

10. Why do I see .bak files?
Q: What are .bak files and why are they created?
A: They are backup files made by your text editor, not Git. You can ignore or delete them if not needed.

11. How can I ignore files (like .bak) in Git?
Q: How to make Git ignore backup files?
A: Add *.bak to a file called .gitignore in your project, then commit .gitignore to your repo.

12. How do I handle ‘pathspec did not match any files’ error?
Q: Why did git add .gitignore fail?
A: Your file was named .gitignore.txt (not .gitignore). Remove the .txt extension to fix.

13. What is Vim and how do I exit/save in it?
Q: Why did Git open a black screen when merging?
A: That’s Vim, the default text editor for Git on many systems.

Save and exit with: Esc, then :wq, then Enter.

14. What does git stash, git pull, git stash pop do?
Q: How does stashing work?
A:    git *stash* temporarily saves your uncommitted changes.
      git pull origin main brings down new code from GitHub.
      git *stash pop* reapplies your changes on top of the new code.

If there’s a conflict, Git will ask you to resolve it.

15. How do I resolve a merge conflict about a deleted file?
Q: What to do when Git says deleted by us or can’t commit because of an unmerged file?
A: If you want to delete the file:
		git rm <file>
		If you want to keep it:
		git add <file>

Then:
git commit -m "Resolve conflict"

16. How do I remove or keep .bak file after a conflict?
Q: Should I keep or remove the .bak file?
A:Up to you! Generally, delete backup files and add them to .gitignore for cleaner repos.

Extra Tips You’ve Learned
How to open your folder in Explorer from Git Bash: explorer .

How to list files: ls

How to check the status of your repo: git status

How to rename files to remove .txt extensions if needed.

Q: What is a Git branch and why should I use it?
A: A branch lets you work on new features or fixes without affecting the main project. Each branch is an independent line of development.

Q: How do I create and switch to a new branch?
A:	git checkout -b feature-1
	This creates feature-1 and switches you to it.

Q: How can I see all my branches?
A: git branch
The branch with * is the one you’re currently on.

Q: How do I merge my changes from a feature branch into main?
A: 	git checkout main
	git merge feature-1
	This brings your feature branch changes into main.

Q: What does “fast-forward” mean in merging?
A: It means your main branch had no new commits since branching, so Git just moves main’s pointer up—no new merge commit is needed.

Q: Why don’t I see my new branch on GitHub?
A: You need to push it: git push -u origin feature-1

🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵Part 2: Pulling Updates & Resolving Conflicts — Q&A🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵

Q: What is a merge conflict?
A: It happens when two branches have changed the same part of a file, and Git can’t automatically combine the changes.

Q: How do I simulate a merge conflict?
A: Make a change to the same file (e.g., hello.txt) in both main and feature-1.
Commit and push both.

Try to merge:
git checkout feature-1
git merge main
You’ll see a conflict if both changed the same lines.

Q: How do I recognize a conflict in the file?
A: You’ll see special markers:

markdown
Copy
Edit
<<<<<<< HEAD
your branch’s version
=======
other branch’s version
>>>>>>> main

Q: How do I resolve a conflict?
A:Edit the file to keep what you want (can keep both, pick one, or reword).
Remove the conflict markers (<<<<<<<, =======, >>>>>>>).
Save the file.

Stage and commit the resolution:

git add <filename>
git commit -m "Resolved conflict"
git push

Q: How do I avoid tracking backup files (.bak)?
A: Add *.bak to your .gitignore.

Q: What if I see “nothing added to commit but untracked files present”?
A: You likely added the wrong filename (wrong case/spelling) or forgot to stage a file. Double-check file names with ls or git status.

Q2: How do you create a new branch and switch to it in a single command?
A:git checkout -b <branch-name>

Q3: What is the difference between git merge and git rebase?
A:git merge combines two branches and preserves their history.
git rebase moves or “reapplies” commits from one branch on top of another, creating a linear history.

Q4: What is a fast-forward merge?
A: When the target branch has not diverged from the branch being merged, Git simply moves the branch pointer forward—no merge commit is created.

Q5: How do you delete a branch locally and remotely?
A:

Locally: git branch -d <branch>

Remotely: git push origin --delete <branch>

Q6: What is the purpose of the -u flag in git push -u origin <branch>?
A: It sets the upstream branch, so you can use just git push and git pull on that branch going forward.

Q7: How do you list all remote branches?
A:git branch -r

🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 Pulling Updates & Resolving Conflicts: Interview Questions🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
Q8: What causes a merge conflict in Git?
A: Merge conflicts happen when two branches have made changes to the same line(s) of a file or when a file is modified in one branch and deleted in another.

Q9: How do you resolve a merge conflict?
A: Open the conflicted file, look for conflict markers (<<<<<<<, =======, >>>>>>>), edit to resolve, remove the markers, then stage and commit the file.

Q10: What command do you use to see which files are conflicted?
A:git status

Q11: What are the steps after you’ve resolved a conflict in a file?
A:Stage the resolved file: git add <file>
Complete the merge with a commit: git commit -m "Resolved conflict"

Q12: What does git stash do and when is it useful?
A: It temporarily shelves local changes not yet committed. Useful when you want to switch branches or pull updates but aren’t ready to commit your work.

Q13: How would you ignore certain files (like logs or backups) from being tracked by Git?
A: By adding their patterns to a .gitignore file.

Q14: How can you undo a merge if things go wrong?
A:	If you haven’t committed yet: git merge --abort
	If committed: git reset --hard <commit-id>

Q15: What does it mean when you see deleted by us or both modified during a merge?
A: deleted by us: The file was deleted on the current branch but modified on the other.
both modified: Both branches changed the same file’s lines, causing a conflict.

Q16: How do you view the history of a file, including merges?
A:git log --oneline --graph --all -- <file>

Q17: How do you resolve a conflict if you want to keep only the incoming changes?
A: Use:
		git checkout --theirs <file>
		git add <file>

Q18: What is a Pull Request (PR) and how is it related to branches?
A: A Pull Request is a GitHub/GitLab feature for proposing changes. It lets team members review and discuss code before merging one branch into another (commonly used for merging feature branches into main).